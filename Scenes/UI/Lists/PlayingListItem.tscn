[gd_scene load_steps=8 format=3 uid="uid://xnr2qgqkvjyn"]

[ext_resource type="StyleBox" uid="uid://duhmik1loeema" path="res://Themes/GBABox.tres" id="1_mxeim"]
[ext_resource type="PackedScene" uid="uid://tobk6a46hgx" path="res://Scenes/UI/Lists/item_options_copy.tscn" id="4_06dqo"]
[ext_resource type="Texture2D" uid="uid://cj4eckcnktq41" path="res://Art/Cards/1 ex Ruby & Saphire/109.jpg" id="4_f4ki5"]
[ext_resource type="Texture2D" uid="uid://cijlbc37pj4gd" path="res://icon.svg" id="5_0okov"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_yloa2"]
bg_color = Color(0.301961, 0.215686, 0.556863, 1)
border_width_left = 1
border_width_top = 2
border_width_right = 1
border_width_bottom = 2
border_color = Color(0.286275, 0.00392157, 0.611765, 1)
border_blend = true

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_auhmd"]
bg_color = Color(0.129649, 0.0483941, 0.353005, 1)
border_width_left = 1
border_width_top = 2
border_width_right = 1
border_width_bottom = 2
border_color = Color(0.286275, 0.00392157, 0.611765, 1)
border_blend = true

[sub_resource type="GDScript" id="GDScript_5bolh"]
script/source = "extends Button

@export var card: Base_Card
@export var option_offset: Vector2 = Vector2(30, 100)
@export var option_popup: PackedScene
@export_flags(\"Basic\", \"Evolution\", \"Item\",
\"Supporter\", \"Stadium\", \"Tool\", \"TM\", \"RSM\", \"Fossil\",
 \"Energy\") var card_flags: int = 0

@onready var marker_2d: Marker2D = $Marker2D

var parent: Node
var checking_card: Node
var stack_act: Constants.STACK_ACT
var allowed: bool = false

#--------------------------------------
#region INITALIZATION
func _ready() -> void:
	%Class.clear()
	card_flags = Conversions.get_card_flags(card)
	
	if card_flags & 1 or card_flags & 2: %Class.append_text(card.pokemon_properties.evo_stage)
	elif card_flags & 8: %Class.append_text(\"Support\")
	elif card_flags & 128: %Class.append_text(\"RSM\")
	elif card_flags & 256: %Class.append_text(\"Fossil\")
	elif card_flags & 512: %Class.append_text(card.energy_properties.considered)
	else: %Class.append_text(card.trainer_properties.considered)
	
	%Art.texture = card.image
	%Name.clear()
	%Name.append_text(card.name)
	
	set_name(card.name)

func allow(play_as: int):
	allowed = true
	print(play_as & card_flags, play_as, card_flags)
	card_flags = play_as & card_flags
	disabled = false

func not_allowed():
	allowed = false
	#disabled = true

func allow_move_to(destination: Constants.STACKS):
	match destination:
		Constants.STACKS.DISCARD: stack_act = Constants.STACK_ACT.DISCARD
		_: stack_act = Constants.STACK_ACT.TUTOR

#endregion
#--------------------------------------

#--------------------------------------
#region ACTIONS
func show_options() -> Node:
	var option_Display = option_popup.instantiate()
	print(option_Display, option_Display.get_script(), option_Display.has_method(\"set\"))
	print(\"LIST\\n -----------------------\\n\",option_Display.get_property_list())
	#var other = load(\"res://Scenes/UI/Lists/item_options_copy.tscn\").instantiate()
	#option_Display.set_script(\"res://Code/Scenes/UI/ItemOptions.gd\")
	#print(option_Display.get_script(), other.get_script())
	#var option_position = Vector2(size.x/2 - position.x - 80, global_position.y - size.y/4)
	#option_position = Vector2(size.x/2 - global_position.x - 80, global_position.y + size.y/1.25)
	option_Display.card_flags = card_flags
	#option_Display.global_position = option_position + Vector2(80,0)
	option_Display.position = position + option_offset
	option_Display.scale = Vector2(.05, .05)
	option_Display.modulate = Color.TRANSPARENT
	#option_Display.stack_act = parent.stack_act
	
	if allowed:
		option_Display.stack_act = stack_act
	else:
		option_Display.stack_act = \"Look\"
	
	parent.add_child(option_Display)
	option_Display.origin_button = self
	option_Display.bring_up()
	
	return option_Display

#There's a function almost just like this in 
#\"res://Scenes/UI/UIComponents/art_button.tscn\"
#One day make a function that can do this kind of task globally from any node
func show_card() -> void:
	var considered: String = card.card_display()
	var node_tween: Tween = get_tree().create_tween().set_parallel(true)
	var card_display: Node
	match considered:
		\"Pokemon\":
			card_display = load(\"res://Scenes/UI/CardDisplay/PokemonCard.tscn\").instantiate()
			card_display.checking = true
		\"Trainer\":
			card_display = Constants.trainer_card.instantiate()
		\"Energy\":
			card_display = Constants.energy_card.instantiate()
	
	card_display.card = card
	card_display.top_level = true
	card_display.position = global_position #Put on center of screen
	card_display.scale = Vector2(.05, .05)
	card_display.modulate = Color.TRANSPARENT
	card_display.name = str(card.name, \" Card\")
	add_child(card_display)
	parent.display = card_display
	parent.connect_display()
	
	node_tween.tween_property(card_display, \"position\", get_viewport_rect().size / 2 - Vector2(100,150), .1)
	node_tween.tween_property(card_display, \"scale\", Vector2.ONE, .1)
	node_tween.tween_property(card_display, \"modulate\", Color.WHITE, .1)
	
	#Can't do anything outside of interact with the check display
	Globals.checking_card()

func _gui_input(event):
	if not Globals.checking:
		if event.is_action_pressed(\"A\"):
			if parent.options:
				await parent.options.disapear()
			else:
				parent.options = show_options()
		elif event.is_action_pressed(\"L\"):
			if parent.display:
				pass
			
			show_card()

#endregion
#--------------------------------------
"

[node name="PlayingListItem" type="Button"]
clip_contents = true
custom_minimum_size = Vector2(400, 60)
anchors_preset = -1
anchor_left = 0.314
anchor_top = 0.458
anchor_right = 0.686
anchor_bottom = 0.542
offset_left = -0.120026
offset_top = 0.23999
offset_right = 0.119934
offset_bottom = -0.240051
grow_horizontal = 2
grow_vertical = 2
mouse_default_cursor_shape = 2
theme_override_styles/hover = SubResource("StyleBoxFlat_yloa2")
theme_override_styles/pressed = SubResource("StyleBoxFlat_auhmd")
theme_override_styles/normal = ExtResource("1_mxeim")
disabled = true
script = SubResource("GDScript_5bolh")
option_popup = ExtResource("4_06dqo")

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 0
offset_right = 407.0
offset_bottom = 84.0

[node name="MarginContainer" type="MarginContainer" parent="VBoxContainer"]
layout_mode = 2
theme_override_constants/margin_bottom = 0

[node name="HBoxContainer" type="HBoxContainer" parent="VBoxContainer"]
layout_mode = 2

[node name="MarginContainer" type="MarginContainer" parent="VBoxContainer/HBoxContainer"]
layout_mode = 2
theme_override_constants/margin_right = 13

[node name="Class" type="RichTextLabel" parent="VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(65, 0)
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
mouse_filter = 2
bbcode_enabled = true
text = "Stage 1"
fit_content = true

[node name="Art" type="TextureRect" parent="VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
clip_contents = true
custom_minimum_size = Vector2(90, 52)
layout_mode = 2
mouse_filter = 2
texture = ExtResource("4_f4ki5")
expand_mode = 2
stretch_mode = 5

[node name="Name" type="RichTextLabel" parent="VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(206, 0)
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
mouse_filter = 2
bbcode_enabled = true
text = "Team Magma's Mightyena"
fit_content = true

[node name="MarginContainer2" type="MarginContainer" parent="VBoxContainer/HBoxContainer"]
layout_mode = 2
theme_override_constants/margin_right = 15

[node name="MarginContainer2" type="MarginContainer" parent="VBoxContainer"]
visible = false
layout_mode = 2
theme_override_constants/margin_top = 19

[node name="Marker2D" type="Marker2D" parent="."]
position = Vector2(378, 32)

[node name="TextureRect" type="TextureRect" parent="Marker2D"]
visible = false
offset_left = -68.0
offset_top = -70.0
offset_right = 60.0
offset_bottom = 58.0
size_flags_horizontal = 4
size_flags_vertical = 4
texture = ExtResource("5_0okov")
